generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  email            String             @unique
  password         String
  roleId           Int

  role             Role               @relation(fields: [roleId], references: [id])
}

model Role {
  id              Int                @id @default(autoincrement())
  name            String             @unique
  users           User[]
  POTestCaseData  POTestCaseData[]
  DevTestCaseData DevTestCaseData[]
  QCTestCaseData  QCTestCaseData[]
}

model BpmnDiagram {
  id         Int               @id @default(autoincrement())
  name       String
  xmlContent String
  type       VisibilityType
  jsonContent Json?

  testCase    TestCase[]  @relation("DiagramTestCase") // ðŸ‘ˆ chá»‰ 1 test case
}

model TestCase {
  id        Int          @id @default(autoincrement())
  name      String
  description String?
  createdAt   DateTime   @default(now())
  diagramId Int
  type        VisibilityType
  status      TestCaseStatus    @default(DRAFT) // âœ… má»›i thÃªm
  project String?

  testCaseWorkflows TestCaseWorkflow[]
  diagram     BpmnDiagram @relation("DiagramTestCase", fields: [diagramId], references: [id])

  poData  POTestCaseData[]
  devData DevTestCaseData[]
  QCData  QCTestCaseData[]
}

model POTestCaseData {
  id          Int      @id @default(autoincrement())
  testCaseId  Int
  nodeData   Json?     // ðŸ‘ˆ chá»©a táº¥t cáº£: nodeId + apis + input + expected
  description String
  attachments String[]
  roleId      Int?     // optional

  testCase TestCase @relation(fields: [testCaseId], references: [id])
  role     Role?    @relation(fields: [roleId], references: [id])

}

model DevTestCaseData {
  id         Int      @id @default(autoincrement())
  testCaseId Int
  nodeData   Json?     // ðŸ‘ˆ chá»©a táº¥t cáº£: nodeId + apis + input + expected
  roleId     Int?

  testCase TestCase @relation(fields: [testCaseId], references: [id])
  role     Role?    @relation(fields: [roleId], references: [id])

}

model QCTestCaseData {
  id          Int      @id @default(autoincrement())
  testCaseId  Int
  nodeData   Json?     // ðŸ‘ˆ chá»©a táº¥t cáº£: nodeId + apis + input + expected
  roleId      Int?

  testCase TestCase @relation(fields: [testCaseId], references: [id])
  role     Role?    @relation(fields: [roleId], references: [id])

}

model TestCaseWorkflow {
  id           Int       @id @default(autoincrement())
  testCaseId   Int
  testCase     TestCase  @relation(fields: [testCaseId], references: [id])
  workflowId   String    @db.VarChar(100) // ID from n8n
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
}

enum VisibilityType {
  GENERAL
  ROLE_BASED
}
enum TestCaseStatus {
  DRAFT
  IN_PROGRESS
  DONE
  REJECTED
}